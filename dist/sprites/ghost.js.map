{"version":3,"sources":["../../src/sprites/ghost.js"],"names":["UP","LEFT","DOWN","RIGHT","Pacman","Ghost","constructor","game","map","colour","position","x","y","direction","getRandomDirection","due","eatable","eaten","getNewCoord","dir","current","speed","isVunerable","isHidden","xSpeed","ySpeed","addBounded","x1","x2","rem","result","isDangerous","moves","Math","floor","random","reset","onWholeSquare","oppositeDirection","makeEatable","getTick","eat","pointToCoord","round","nextSquare","onGridSquare","pos","secondsAgo","tick","FPS","getColour","draw","ctx","s","blockSize","top","left","tl","base","inc","high","low","fillStyle","beginPath","moveTo","quadraticCurveTo","closePath","fill","arc","f","off","pane","move","oldPos","onGrid","npos","isFloor","isWall","tm","new","old"],"mappings":"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","file":"ghost.js","sourcesContent":["import { UP, LEFT, DOWN, RIGHT, Pacman } from '../constants.js';\n\nexport default class Ghost {\n\n  constructor(game, map, colour) {\n    this.position = {\n      x: 90,\n      y: 80,\n    };\n    this.direction = this.getRandomDirection();\n    this.due = this.getRandomDirection();\n    this.eatable = null;\n    this.eaten = null;\n    this.colour = colour;\n    this.game = game;\n    this.map = map;\n  }\n\n  getNewCoord(dir, current) {\n    let speed;\n    if (this.isVunerable()) {\n      speed = 0.25;\n    } else if (this.isHidden()) {\n      speed = 2;\n    } else {\n      speed = 0.5;\n    }\n    const xSpeed = dir === LEFT && -speed || dir === RIGHT && speed || 0;\n    const ySpeed = dir === DOWN && speed || dir === UP && -speed || 0;\n\n    const x = this.addBounded(current.x, xSpeed);\n    const y = this.addBounded(current.y, ySpeed);\n    return { x, y };\n  }\n\n\n  /* Keep this method  */\n  addBounded(x1, x2) {\n    const rem = x1 % 10;\n    const result = rem + x2;\n\n    if (rem !== 0 && result > 10) {\n      return x1 + (10 - rem);\n    } else if (rem > 0 && result <  0) {\n      return x1 - rem;\n    }\n\n    return x1 + x2;\n  }\n\n  isVunerable() {\n    return this.eatable !== null;\n  }\n\n  isDangerous() {\n    return this.eaten === null;\n  }\n\n  isHidden() {\n    return !this.isVunerable() && !this.isDangerous();\n  }\n\n  getRandomDirection() {\n    let moves;\n    if (this.direction === LEFT || this.direction === RIGHT) {\n      moves = [UP, DOWN];\n    } else {\n      moves = [LEFT, RIGHT];\n    }\n    return moves[Math.floor(Math.random() * 2)];\n  }\n\n  reset() {\n    this.eaten = null;\n    this.eatable = null;\n    this.position = {\n      x: 90,\n      y: 80,\n    };\n    this.direction = this.getRandomDirection();\n    this.due = this.getRandomDirection();\n  }\n\n  onWholeSquare(x) {\n    return x % 10 === 0;\n  }\n\n  oppositeDirection(dir) {\n    let oppositeDirection;\n    /* No switch statements allowed? Got a esinting error */\n    switch (dir) {\n      case LEFT:\n        oppositeDirection = RIGHT;\n        break;\n      case RIGHT:\n        oppositeDirection = LEFT;\n        break;\n      case UP:\n        oppositeDirection = DOWN;\n        break;\n      case DOWN:\n        oppositeDirection = UP;\n        break;\n    }\n    return oppositeDirection;\n  }\n\n  makeEatable() {\n    this.direction = this.oppositeDirection(this.direction);\n    this.eatable = this.game.getTick();\n  }\n\n  eat() {\n    this.eatable = null;\n    this.eaten = this.game.getTick();\n  }\n\n  pointToCoord(x) {\n    return Math.round(x / 10);\n  }\n\n  nextSquare(x, dir) {\n    const rem = x % 10;\n    if (rem === 0) {\n      return x;\n    } else if (dir === RIGHT || dir === DOWN) {\n      return x + (10 - rem);\n    }\n    return x - rem;\n  }\n\n  onGridSquare(pos) {\n    return this.onWholeSquare(pos.y) && this.onWholeSquare(pos.x);\n  }\n\n  secondsAgo(tick) {\n    return (this.game.getTick() - tick) / Pacman.FPS;\n  }\n\n  getColour() {\n    if (this.eatable) {\n      if (this.secondsAgo(this.eatable) > 5) {\n        if (this.game.getTick() % 20 > 10) {\n          return '#FFFFFF';\n        }\n        return '#0000BB';\n      }\n      return '#0000BB';\n    } else if (this.eaten) {\n      return '#222';\n    }\n    return this.colour;\n  }\n\n  draw(ctx) {\n    const s = this.map.blockSize;\n    const top = this.position.y / 10 * s;\n    const left = this.position.x / 10 * s;\n\n    if (this.eatable && this.secondsAgo(this.eatable) > 8) {\n      this.eatable = null;\n    }\n\n    if (this.eaten && this.secondsAgo(this.eaten) > 3) {\n      this.eaten = null;\n    }\n\n    const tl = left + s;\n    const base = top + s - 3;\n    const inc = s / 10;\n\n    let high;\n    if (this.game.getTick() % 10 > 5) {\n      high = 3;\n    } else {\n      high = -3;\n    }\n\n    let low;\n    if (this.game.getTick() % 10 > 5) {\n      low = -3;\n    } else {\n      low = 3;\n    }\n\n    ctx.fillStyle = this.getColour();\n    ctx.beginPath();\n\n    ctx.moveTo(left, base);\n\n    ctx.quadraticCurveTo(left, top, left + s / 2, top);\n    ctx.quadraticCurveTo(left + s, top, left + s, base);\n\n    // Wavy things at the bottom\n    ctx.quadraticCurveTo(tl - inc * 1, base + high, tl - inc * 2, base);\n    ctx.quadraticCurveTo(tl - inc * 3, base + low, tl - inc * 4, base);\n    ctx.quadraticCurveTo(tl - inc * 5, base + high, tl - inc * 6, base);\n    ctx.quadraticCurveTo(tl - inc * 7, base + low, tl - inc * 8, base);\n    ctx.quadraticCurveTo(tl - inc * 9, base + high, tl - inc * 10, base);\n\n    ctx.closePath();\n    ctx.fill();\n\n    ctx.beginPath();\n    ctx.fillStyle = '#FFF';\n    ctx.arc(left + 6, top + 6, s / 6, 0, 300, false);\n    ctx.arc(left + s - 6, top + 6, s / 6, 0, 300, false);\n    ctx.closePath();\n    ctx.fill();\n\n    const f = s / 12;\n    const off = {};\n    off[RIGHT] = [f, 0];\n    off[LEFT] = [-f, 0];\n    off[UP] = [0, -f];\n    off[DOWN] = [0, f];\n\n    ctx.beginPath();\n    ctx.fillStyle = '#000';\n    ctx.arc(left + 6 + off[this.direction][0], top + 6 + off[this.direction][1],\n      s / 15, 0, 300, false);\n    ctx.arc(left + s - 6 + off[this.direction][0],\n      top + 6 + off[this.direction][1],\n      s / 15, 0, 300, false);\n    ctx.closePath();\n    ctx.fill();\n\n  }\n\n  pane(pos) {\n\n    if (pos.y === 100 && pos.x >= 190 && this.direction === RIGHT) {\n      return {\n        y: 100,\n        x: -10,\n      };\n    }\n\n    if (pos.y === 100 && pos.x <= -10 && this.direction === LEFT) {\n      return this.position = {\n        y: 100,\n        x: 190,\n      };\n    }\n\n    return false;\n  }\n\n  move(ctx) {\n\n    const oldPos = this.position;\n    const onGrid = this.onGridSquare(this.position);\n    let npos = null;\n\n    if (this.due !== this.direction) {\n      npos = this.getNewCoord(this.due, this.position);\n\n      if (onGrid\n        && this.map.isFloor({\n          x: this.pointToCoord(this.nextSquare(npos.x, this.due)),\n          y: this.pointToCoord(this.nextSquare(npos.y, this.due)),\n        })) {\n        this.direction = this.due;\n      } else {\n        npos = null;\n      }\n    }\n\n    if (npos === null) {\n      npos = this.getNewCoord(this.direction, this.position);\n    }\n\n    if (onGrid\n      && this.map.isWall({\n        y: this.pointToCoord(this.nextSquare(npos.y, this.direction)),\n        x: this.pointToCoord(this.nextSquare(npos.x, this.direction)),\n      })) {\n\n      this.due = this.getRandomDirection();\n      return this.move(ctx);\n    }\n\n    this.position = npos;\n\n    const tm = this.pane(this.position);\n    if (tm) {\n      this.position = tm;\n    }\n\n    this.due = this.getRandomDirection();\n\n    return {\n      new: this.position,\n      old: oldPos,\n    };\n  }\n\n}\n"]}