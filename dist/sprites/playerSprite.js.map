{"version":3,"sources":["../../src/sprites/playerSprite.js"],"names":["UP","LEFT","DOWN","RIGHT","NONE","Pacman","KEY","PlayerSprite","constructor","game","map","keyMap","ARROW_LEFT","ARROW_UP","ARROW_RIGHT","ARROW_DOWN","keyDown","ev","keyCode","due","preventDefault","stopPropagation","getNewCoord","dir","current","x","y","onWholeSquare","pointToCoord","Math","round","nextSquare","rem","next","pos","onGridSquare","isOnSamePlane","isMidSquare","move","npos","nextWhole","oldPosition","position","block","direction","isFloor","isWall","new","old","getBlock","COOKIE","PILL","setBlock","EMPTY","addScore","eaten","completedLevel","eatenPill","drawDead","ctx","amount","size","blockSize","half","fillStyle","beginPath","moveTo","arc","PI","fill","draw","s","angle","calcAngle","start","end"],"mappings":"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","file":"playerSprite.js","sourcesContent":["import {\n  UP,\n  LEFT,\n  DOWN,\n  RIGHT,\n  NONE,\n  Pacman,\n  KEY,\n} from '../constants.js';\n\n\nexport default class PlayerSprite {\n\n  constructor(game, map) {\n    this.game = game;\n    this.map = map;\n    this.keyMap = {};\n    this.keyMap[KEY.ARROW_LEFT] = LEFT;\n    this.keyMap[KEY.ARROW_UP] = UP;\n    this.keyMap[KEY.ARROW_RIGHT] = RIGHT;\n    this.keyMap[KEY.ARROW_DOWN] = DOWN;\n  }\n\n  keyDown(ev) {\n    if (this.keyMap[ev.keyCode] !== 'undefined') {\n      this.due = this.keyMap[ev.keyCode];\n      ev.preventDefault();\n      ev.stopPropagation();\n      return false;\n    }\n    return true;\n  }\n\n  getNewCoord(dir, current) {\n    return {\n      x: current.x + (dir === LEFT && -2 || dir === RIGHT && 2 || 0),\n      y: current.y + (dir === DOWN && 2 || dir === UP && -2 || 0),\n    };\n  }\n\n  onWholeSquare(x) {\n    return x % 10 === 0;\n  }\n\n  pointToCoord(x) {\n    return Math.round(x / 10);\n  }\n\n  nextSquare(x, dir) {\n    const rem = x % 10;\n    if (rem === 0) {\n      return x;\n    } else if (dir === RIGHT || dir === DOWN) {\n      return x + (10 - rem);\n    }\n    return x - rem;\n  }\n\n  next(pos, dir) {\n    return {\n      y: this.pointToCoord(this.nextSquare(pos.y, dir)),\n      x: this.pointToCoord(this.nextSquare(pos.x, dir)),\n    };\n  }\n\n  onGridSquare(pos) {\n    return this.onWholeSquare(pos.y) && this.onWholeSquare(pos.x);\n  }\n\n  isOnSamePlane(due, dir) {\n    return ((due === LEFT || due === RIGHT) &&\n            (dir === LEFT || dir === RIGHT)) ||\n        ((due === UP || due === DOWN) &&\n         (dir === UP || dir === DOWN));\n  }\n\n  isMidSquare(x) {\n    const rem = x % 10;\n    return rem > 3 || rem < 7;\n  }\n\n  move() {\n    let npos = null;\n    let nextWhole = null;\n    const oldPosition = this.position;\n    let block = null;\n\n    if (this.due !== this.direction) {\n      npos = this.getNewCoord(this.due, this.position);\n\n      if (this.isOnSamePlane(this.due, this.direction)\n        || this.onGridSquare(this.position)\n        && this.map.isFloor(this.next(npos, this.due))) {\n        this.direction = this.due;\n      } else {\n        npos = null;\n      }\n    }\n\n    if (npos === null) {\n      npos = this.getNewCoord(this.direction, this.position);\n    }\n\n    if (this.onGridSquare(this.position)\n        && this.map.isWall(this.next(npos, this.direction))) {\n      this.direction = NONE;\n    }\n\n    if (this.direction === NONE) {\n      return {\n        new: this.position,\n        old: this.position,\n      };\n    }\n\n    if (npos.y === 100 && npos.x >= 190 && this.direction === RIGHT) {\n      npos = {\n        y: 100,\n        x: -10,\n      };\n    }\n\n    if (npos.y === 100 && npos.x <= -12 && this.direction === LEFT) {\n      npos = {\n        y: 100,\n        x: 190,\n      };\n    }\n\n    this.position = npos;\n    nextWhole = this.next(this.position, this.direction);\n\n    block = this.map.getBlock(nextWhole);\n\n    if ((this.isMidSquare(this.position.y) || this.isMidSquare(this.position.x))\n    && block === Pacman.COOKIE || block === Pacman.PILL) {\n\n      this.map.setBlock(nextWhole, Pacman.EMPTY);\n      this.addScore(block === Pacman.COOKIE ?\n       10 :\n       50);\n      this.eaten += 1;\n\n      if (this.eaten === 182) {\n        this.game.completedLevel();\n      }\n\n      if (block === Pacman.PILL) {\n        this.game.eatenPill();\n      }\n    }\n\n    return {\n      new: this.position,\n      old: oldPosition\n    };\n  }\n\n\n\n\n  drawDead(ctx, amount) {\n\n    const size = this.map.blockSize;\n    const half = size / 2;\n\n    if (amount >= 1) {\n      return;\n    }\n\n    ctx.fillStyle = '#FFFF00';\n    ctx.beginPath();\n    ctx.moveTo(this.position.x / 10 * size + half,\n      this.position.y / 10 * size + half);\n\n    ctx.arc(this.position.x / 10 * size + half,\n      this.position.y / 10 * size + half,\n      half, 0, Math.PI * 2 * amount, true);\n\n    ctx.fill();\n  }\n\n  draw(ctx) {\n    const s = this.map.blockSize;\n    const angle = this.calcAngle(this.direction, this.position);\n\n    ctx.fillStyle = '#FFFF00';\n\n    ctx.beginPath();\n\n    ctx.moveTo(this.position.x / 10 * s + s / 2,\n      this.position.y / 10 * s + s / 2);\n\n    ctx.arc(this.position.x / 10 * s + s / 2,\n      this.position.y / 10 * s + s / 2,\n      s / 2, Math.PI * angle.start,\n      Math.PI * angle.end, angle.direction);\n\n    ctx.fill();\n  }\n\n  // Angle calculation for drawing\n  calcAngle(dir, pos) {\n    if (dir === RIGHT && pos.x % 10 < 5) {\n      return {\n        start: 0.25,\n        end: 1.75,\n        direction: false,\n      };\n    } else if (dir === DOWN && pos.y % 10 < 5) {\n      return {\n        start: 0.75,\n        end: 2.25,\n        direction: false,\n      };\n    } else if (dir === UP && pos.y % 10 < 5) {\n      return {\n        start: 1.25,\n        end: 1.75,\n        direction: true,\n      };\n    } else if (dir === LEFT && pos.x % 10 < 5) {\n      return {\n        start: 0.75,\n        end: 1.25,\n        direction: true,\n      };\n    }\n    return {\n      start: 0,\n      end: 2,\n      direction: false,\n    };\n  }\n}\n"]}