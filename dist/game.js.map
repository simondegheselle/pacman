{"version":3,"sources":["../src/game.js"],"names":["WAITING","COUNTDOWN","PAUSE","PLAYING","EATEN_PAUSE","DYING","Pacman","KEY","Map","Player","Ghost","GameMechanics","Game","constructor","wrapper","ghosts","ghostColors","eatenCount","level","ghostPos","playerPos","timerStart","map","player","init","startLevel","newLevel","i","length","reset","tick","setState","startNewGame","initMap","draw","ctx","loseLife","getLives","collided","ghost","Math","sqrt","pow","x","y","mainLoop","diff","state","drawPills","mainDraw","stateChanged","dialog","FPS","redrawBlock","userPos","old","push","drawDead","floor","lastTime","drawFooter","eatenPill","makeEatable","completedLevel"],"mappings":"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","file":"game.js","sourcesContent":["import {\n  WAITING,\n  COUNTDOWN,\n  PAUSE,\n  PLAYING,\n  EATEN_PAUSE,\n  DYING,\n  Pacman,\n  KEY,\n} from './constants.js';\n\nimport Map from './map.js';\nimport Player from './sprites/player.js';\nimport Ghost from './sprites/ghost.js';\n\nimport GameMechanics from './game-mechanics';\n\nexport default class Game extends GameMechanics {\n\n  constructor(wrapper) {\n    super(wrapper);\n    this.ghosts = [];\n    this.ghostColors = ['#00FFDE', '#FF0000', '#FFB8DE', '#FFB847'];\n    this.eatenCount = 0;\n    this.level = 0;\n    this.ghostPos = null;\n    this.playerPos = null;\n    this.timerStart = null;\n    this.map = null;\n    this.player = null;\n    this.init(wrapper);\n  }\n\n  startLevel() {\n    this.player.newLevel();\n    let i = 0;\n    while (i < this.ghosts.length) {\n      this.ghosts[i].reset();\n      i += 1;\n    }\n    this.timerStart = this.tick;\n    this.setState(COUNTDOWN);\n  }\n\n  startNewGame() {\n    this.setState(WAITING);\n    this.level = 1;\n    this.player.reset();\n    this.map.initMap();\n    this.map.draw(this.ctx);\n    this.startLevel();\n  }\n\n  loseLife() {\n    this.setState(WAITING);\n    this.player.loseLife();\n    if (this.player.getLives() > 0) {\n      this.startLevel();\n    }\n  }\n\n  collided(player, ghost) {\n    return Math.sqrt(Math.pow(ghost.x - player.x, 2)\n      + Math.pow(ghost.y - player.y, 2)) < 10;\n  }\n\n  mainLoop() {\n    let diff;\n\n    if (this.state !== PAUSE) {\n      ++this.tick;\n    }\n\n    this.map.drawPills(this.ctx);\n\n    if (this.state === PLAYING) {\n      this.mainDraw();\n    } else if (this.state === WAITING && this.stateChanged) {\n      this.stateChanged = false;\n      this.map.draw(this.ctx);\n      this.dialog('Press N to start a New game');\n    } else if (this.state === EATEN_PAUSE &&\n      (this.tick - this.timerStart) > (Pacman.FPS / 3)) {\n      this.map.draw(this.ctx);\n      this.setState(PLAYING);\n    } else if (this.state === DYING) {\n      if (this.tick - this.timerStart > (Pacman.FPS * 2)) {\n        this.loseLife();\n      } else {\n        this.redrawBlock(this.userPos);\n        for (let i = 0; i < this.ghosts.length; i += 1) {\n          this.redrawBlock(this.ghostPos[i].old);\n          this.ghostPos.push(this.ghosts[i].draw(this.ctx));\n        }\n        this.player.drawDead(this.ctx, (this.tick - this.timerStart) / (Pacman.FPS * 2));\n      }\n    } else if (this.state === COUNTDOWN) {\n\n      diff = 5 + Math.floor((this.timerStart - this.tick) / Pacman.FPS);\n\n      if (diff === 0) {\n        this.map.draw(this.ctx);\n        this.setState(PLAYING);\n      } else {\n        if (diff !== this.lastTime) {\n          this.lastTime = diff;\n          this.map.draw(this.ctx);\n          this.dialog('Starting in: ' + diff);\n        }\n      }\n    }\n\n    this.drawFooter();\n  }\n\n  eatenPill() {\n    this.timerStart = this.tick;\n    this.eatenCount = 0;\n    for (let i = 0; i < this.ghosts.length; i += 1) {\n      this.ghosts[i].makeEatable(this.ctx);\n    }\n  }\n\n  completedLevel() {\n    this.setState(WAITING);\n    this.level += 1;\n    this.map.reset();\n    this.player.newLevel();\n    this.startLevel();\n  }\n}\n"]}